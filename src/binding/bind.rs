/* automatically generated by rust-bindgen 0.63.0 */
#![allow(dead_code)]

use std::ffi::{c_char, c_void};

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AsstExtAPI {
    _unused: [u8; 0],
}

unsafe impl Send for AsstExtAPI {}

pub type AsstHandle = *mut AsstExtAPI;

pub type AsstBool = u8;
pub type AsstSize = u64;
pub type AsstMsgId = i32;
pub type AsstTaskId = i32;
pub type AsstAsyncCallId = i32;
pub type AsstStaticOptionKey = i32;
pub type AsstInstanceOptionKey = i32;
pub type AsstApiCallback = Option<
    unsafe extern "C" fn(msg: AsstMsgId, detail_json: *const c_char, custom_arg: *mut c_void),
>;

extern "C" {
    pub fn AsstSetUserDir(path: *const c_char) -> AsstBool;
}

extern "C" {
    pub fn AsstLoadResource(path: *const c_char) -> AsstBool;
}

extern "C" {
    pub fn AsstSetStaticOption(key: AsstStaticOptionKey, value: *const c_char) -> AsstBool;
}

extern "C" {
    pub fn AsstCreate() -> AsstHandle;
}

extern "C" {
    pub fn AsstCreateEx(callback: AsstApiCallback, custom_arg: *mut c_void) -> AsstHandle;
}

extern "C" {
    pub fn AsstDestroy(handle: AsstHandle);
}

extern "C" {
    pub fn AsstSetInstanceOption(
        handle: AsstHandle,
        key: AsstInstanceOptionKey,
        value: *const c_char,
    ) -> AsstBool;
}

extern "C" {
    pub fn AsstConnect(
        handle: AsstHandle,
        adb_path: *const c_char,
        address: *const c_char,
        config: *const c_char,
    ) -> AsstBool;
}

extern "C" {
    pub fn AsstAppendTask(
        handle: AsstHandle,
        type_: *const c_char,
        params: *const c_char,
    ) -> AsstTaskId;
}

extern "C" {
    pub fn AsstSetTaskParams(handle: AsstHandle, id: AsstTaskId, params: *const c_char)
        -> AsstBool;
}

extern "C" {
    pub fn AsstStart(handle: AsstHandle) -> AsstBool;
}

extern "C" {
    pub fn AsstStop(handle: AsstHandle) -> AsstBool;
}

extern "C" {
    pub fn AsstRunning(handle: AsstHandle) -> AsstBool;
}

extern "C" {
    pub fn AsstAsyncConnect(
        handle: AsstHandle,
        adb_path: *const c_char,
        address: *const c_char,
        config: *const c_char,
        block: AsstBool,
    ) -> AsstAsyncCallId;
}

extern "C" {
    pub fn AsstAsyncClick(handle: AsstHandle, x: i32, y: i32, block: AsstBool) -> AsstAsyncCallId;
}

extern "C" {
    pub fn AsstAsyncScreencap(handle: AsstHandle, block: AsstBool) -> AsstAsyncCallId;
}

extern "C" {
    pub fn AsstGetImage(handle: AsstHandle, buff: *mut c_void, buff_size: AsstSize) -> AsstSize;
}

extern "C" {
    pub fn AsstGetUUID(handle: AsstHandle, buff: *mut c_char, buff_size: AsstSize) -> AsstSize;
}

extern "C" {
    pub fn AsstGetTasksList(
        handle: AsstHandle,
        buff: *mut AsstTaskId,
        buff_size: AsstSize,
    ) -> AsstSize;
}

extern "C" {
    pub fn AsstGetNullSize() -> AsstSize;
}

extern "C" {
    pub fn AsstGetVersion() -> *const c_char;
}

extern "C" {
    pub fn AsstLog(level: *const c_char, message: *const c_char);
}
